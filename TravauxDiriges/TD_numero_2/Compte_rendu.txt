TD2

1.1 : Question du cours
1) si les processus 0 et 1 envoient en même temps sendbuf1 et sendbuf2 et que le processus 2 reçoit sendbuf2 de 1, 
on se retrouve dans une situation dans laquelle, le processus 0 attend un acquittement de 2, 
le processus 1 n'a plus rien à faire et le processus 2 attend que 0 acquitte sendbuf2.
Les processus sont donc bloqués car ils sont tous en attente et ne peuvent effectuer leur prochaine tâche.

2) Il faut que 0 envoie sendbuf1 à 2, que 2 envoie sendbuf2 à 0, puis que 1 envoie sendbuf1 à 2. 
Dans ce cas, tous les processus ont réalisés toutes leur tâches.

Il y a un interblocage si 2 reçoit sendbuf2 de 1 et il n'y a pas interblocage si 2 reçoit sendbuf1 de 0. 
La probabilité d'interblocage est donc de 1/2.

1.2 : Question du cours n°2 
- Il y a 10% du code qui n'est pas parallélisable. L'accélération maximale est donc de 10 d'après la loi de Amdhal.
- Il est préférable de viser la moitié de l'accélération maximale donc une accélération de 5. 
Pour cela, il faut 5 noeuds de calcul.
- 4 = n + (1-n)s et S = n + (1-n)2s d'après la loi de Gustafson et avec n = 5
On a donc s = 1/4 d'où S = 3. L'accélération maximale est donc de 3.

1.3 : Ensemble de Mandelbrot : 
1) 
   Nombre de tâches | Temps d'éxecution  | Speedup
                1   | 3.2160394191741943 | 1
                2   | 1.7914643287658691 | 1,796
                3   | 1.379706859588623  | 2,332
                4   | 1.1934716701507568 | 2,969

On peut espérer un speedup supérieur à 3 avec un plus grand nombre de processus.
2)
   Nombre de tâches | Temps d'éxecution  | Speedup
                2   | 4.417689323425293  | 0,729
                3   | 2.6215667724609375 | 1,228
                4   | 2.2605552673339844 | 1,422
Le Speedup est moins important que dans le premier cas. Cela s'explique par le fait que il y a un processus
en moins sur le calcul des données et par le fait que la latence créée par les fonctions send et recv est répétée 
de nombreuses fois